#!/bin/usr/env python3
# -*- coding: utf-8 -*-
# filename: 14regularExpression.py
# author:
# description:

# 用\d可以匹配一个数字
# '00\d'可以匹配'007'，但无法匹配'00A'

# \w可以匹配一个字母或数字
# '\w\w\d'可以匹配'py3'

# .可以匹配任意字符
# 'py.'可以匹配'pyc'、'pyo'、'py!'

# 用*表示任意个字符（包括0个）
# 用+表示至少一个字符
# 用?表示0个或1个字符
# 用{n}表示n个字符
# 用{n,m}表示n-m个字符


# 进阶
# 要做更精确地匹配，可以用[]表示范围
# [0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线
# [0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等
# [a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量
# [a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符
# A|B可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'
# ^表示行的开头，^\d表示必须以数字开头
# $表示行的结束，\d$表示必须以数字结束


# re模块
# match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None
import re


test = '用户输入的字符串'
if re.match(r'正则表达式', test):
    print('ok')
else:
    print('failed')


# 切分字符串
# 用正则表达式切分字符串比用固定的字符更灵活
print('a b   c'.split(' '))


# 分组


# 贪婪匹配




