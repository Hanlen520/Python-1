#!/bin/usr/env python3
# -*- coding: utf-8 -*-
# --------------------------------------
# ProjectName: MySpace
# Author: crisimple
# CreateTime: 2019/1/23 23:58
# FileName: D11_08模块正则re.py
# Description:
#           就其本质而言，正则表达式(或re)是一种小型的、高度专业化的编程语言，它内嵌在Python中
#       并通过re模块来实现，正则表达式模式被编译成一系列的字节码，然后由用C编写的匹配引擎执行。
#  正则的作用：可以进行模糊匹配
# Question:
# --------------------------------------

import re

string1 = "Hello World"

# 字符串匹配
# 字符串提供的方法是一种完全匹配，正则提供的是模糊匹配
# string1.find()
# , flags= 可以修改匹配规则
res1 = re.findall("w\w{2}l", "Hello world")
print(res1)

# 1.元字符重复匹配正则实现：
# . ==通配符  只能代指任意一个字符（除了换行符之外） 等价于：{1}
# ^ ==开始匹配符，以什么开始匹配
# $ ==结束匹配符，以什么结束匹配等价于：
# * ==重复匹配符[0, +∞]，可以匹配多个元字符等价于：  等价于：{0， +∞}
# + ==重复匹配符[1, +∞]，可以匹配多个元字符等价于：  等价于：{1, +∞}
# ？ ==重复匹配符[0, 1]，可以匹配多个元字符等价于：  等价于：{0, 1}
# {a, b} ==贪婪匹配任意字符a~b次


# 2.字符集[]：取消元字符的特殊功能(除：\ ^ -)
res2 = re.findall('[w, .]', 'wd.')
print(res2)
# ^放在[]为取反的意思
res3 = re.findall('[^x]', 'yzghxmo')
print(res3)
# \
# \D 匹配任何非数字字符，它相当于类[^0~9]
# \s 匹配任何空白字符，它相当于类[ \t \n \r \f \v]
# \S 匹配任何非空白字符，它相当于类[^ \t \n \r \f \v]
# \w 匹配任何字母数字字符，它相当于类[a-zA-Z0-9]
# \W 匹配任何非字母数字字符，它相当于类[^a-zA-Z0-9]
# \b 匹配与特殊字符的边界

# |


# 3. re.search()返回一个匹配的对象






